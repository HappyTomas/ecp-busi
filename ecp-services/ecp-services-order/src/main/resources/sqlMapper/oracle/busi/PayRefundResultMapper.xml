<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zengshi.ecp.order.dao.mapper.busi.PayRefundResultMapper" >
  <resultMap id="BaseResultMap" type="com.zengshi.ecp.order.dao.model.PayRefundResult" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="BACK_ID" property="backId" jdbcType="INTEGER" />
    <result column="ORDER_ID" property="orderId" jdbcType="VARCHAR" />
    <result column="PAY_WAY" property="payWay" jdbcType="VARCHAR" />
    <result column="REFUND_TRANS_NO" property="refundTransNo" jdbcType="VARCHAR" />
    <result column="REFUND_AMOUNT" property="refundAmount" jdbcType="INTEGER" />
    <result column="REFUND_STATUS" property="refundStatus" jdbcType="VARCHAR" />
    <result column="REFUND_DESC" property="refundDesc" jdbcType="VARCHAR" />
    <result column="REFUND_TIME" property="refundTime" jdbcType="TIMESTAMP" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, BACK_ID, ORDER_ID, PAY_WAY, REFUND_TRANS_NO, REFUND_AMOUNT, REFUND_STATUS, REFUND_DESC, 
    REFUND_TIME, CREATE_TIME, UPDATE_TIME
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zengshi.ecp.order.dao.model.PayRefundResultCriteria" >
    <if test="limitClauseStart != null and limitClauseStart >= 0" >
       select * from (select t_1.*,rownum as row_num from (
    </if>
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_pay_refund_result
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitClauseStart != null and limitClauseStart >= 0" >
       <![CDATA[ ) t_1 where rownum<=#{limitClauseCount,jdbcType=INTEGER} + #{limitClauseStart,jdbcType=INTEGER}) t_2 where t_2.row_num>#{limitClauseStart,jdbcType=INTEGER}]]>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from t_pay_refund_result
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from t_pay_refund_result
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zengshi.ecp.order.dao.model.PayRefundResultCriteria" >
    delete from t_pay_refund_result
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zengshi.ecp.order.dao.model.PayRefundResult" >
    insert into t_pay_refund_result (ID, BACK_ID, ORDER_ID, 
      PAY_WAY, REFUND_TRANS_NO, REFUND_AMOUNT, 
      REFUND_STATUS, REFUND_DESC, REFUND_TIME, 
      CREATE_TIME, UPDATE_TIME)
    values (#{id,jdbcType=INTEGER}, #{backId,jdbcType=INTEGER}, #{orderId,jdbcType=VARCHAR}, 
      #{payWay,jdbcType=VARCHAR}, #{refundTransNo,jdbcType=VARCHAR}, #{refundAmount,jdbcType=INTEGER}, 
      #{refundStatus,jdbcType=VARCHAR}, #{refundDesc,jdbcType=VARCHAR}, #{refundTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.zengshi.ecp.order.dao.model.PayRefundResult" >
    insert into t_pay_refund_result
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="backId != null" >
        BACK_ID,
      </if>
      <if test="orderId != null" >
        ORDER_ID,
      </if>
      <if test="payWay != null" >
        PAY_WAY,
      </if>
      <if test="refundTransNo != null" >
        REFUND_TRANS_NO,
      </if>
      <if test="refundAmount != null" >
        REFUND_AMOUNT,
      </if>
      <if test="refundStatus != null" >
        REFUND_STATUS,
      </if>
      <if test="refundDesc != null" >
        REFUND_DESC,
      </if>
      <if test="refundTime != null" >
        REFUND_TIME,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="backId != null" >
        #{backId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="payWay != null" >
        #{payWay,jdbcType=VARCHAR},
      </if>
      <if test="refundTransNo != null" >
        #{refundTransNo,jdbcType=VARCHAR},
      </if>
      <if test="refundAmount != null" >
        #{refundAmount,jdbcType=INTEGER},
      </if>
      <if test="refundStatus != null" >
        #{refundStatus,jdbcType=VARCHAR},
      </if>
      <if test="refundDesc != null" >
        #{refundDesc,jdbcType=VARCHAR},
      </if>
      <if test="refundTime != null" >
        #{refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zengshi.ecp.order.dao.model.PayRefundResultCriteria" resultType="java.lang.Long" >
    select count(*) from t_pay_refund_result
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_pay_refund_result
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.backId != null" >
        BACK_ID = #{record.backId,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null" >
        ORDER_ID = #{record.orderId,jdbcType=VARCHAR},
      </if>
      <if test="record.payWay != null" >
        PAY_WAY = #{record.payWay,jdbcType=VARCHAR},
      </if>
      <if test="record.refundTransNo != null" >
        REFUND_TRANS_NO = #{record.refundTransNo,jdbcType=VARCHAR},
      </if>
      <if test="record.refundAmount != null" >
        REFUND_AMOUNT = #{record.refundAmount,jdbcType=INTEGER},
      </if>
      <if test="record.refundStatus != null" >
        REFUND_STATUS = #{record.refundStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.refundDesc != null" >
        REFUND_DESC = #{record.refundDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.refundTime != null" >
        REFUND_TIME = #{record.refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_pay_refund_result
    set ID = #{record.id,jdbcType=INTEGER},
      BACK_ID = #{record.backId,jdbcType=INTEGER},
      ORDER_ID = #{record.orderId,jdbcType=VARCHAR},
      PAY_WAY = #{record.payWay,jdbcType=VARCHAR},
      REFUND_TRANS_NO = #{record.refundTransNo,jdbcType=VARCHAR},
      REFUND_AMOUNT = #{record.refundAmount,jdbcType=INTEGER},
      REFUND_STATUS = #{record.refundStatus,jdbcType=VARCHAR},
      REFUND_DESC = #{record.refundDesc,jdbcType=VARCHAR},
      REFUND_TIME = #{record.refundTime,jdbcType=TIMESTAMP},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zengshi.ecp.order.dao.model.PayRefundResult" >
    update t_pay_refund_result
    <set >
      <if test="backId != null" >
        BACK_ID = #{backId,jdbcType=INTEGER},
      </if>
      <if test="orderId != null" >
        ORDER_ID = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="payWay != null" >
        PAY_WAY = #{payWay,jdbcType=VARCHAR},
      </if>
      <if test="refundTransNo != null" >
        REFUND_TRANS_NO = #{refundTransNo,jdbcType=VARCHAR},
      </if>
      <if test="refundAmount != null" >
        REFUND_AMOUNT = #{refundAmount,jdbcType=INTEGER},
      </if>
      <if test="refundStatus != null" >
        REFUND_STATUS = #{refundStatus,jdbcType=VARCHAR},
      </if>
      <if test="refundDesc != null" >
        REFUND_DESC = #{refundDesc,jdbcType=VARCHAR},
      </if>
      <if test="refundTime != null" >
        REFUND_TIME = #{refundTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zengshi.ecp.order.dao.model.PayRefundResult" >
    update t_pay_refund_result
    set BACK_ID = #{backId,jdbcType=INTEGER},
      ORDER_ID = #{orderId,jdbcType=VARCHAR},
      PAY_WAY = #{payWay,jdbcType=VARCHAR},
      REFUND_TRANS_NO = #{refundTransNo,jdbcType=VARCHAR},
      REFUND_AMOUNT = #{refundAmount,jdbcType=INTEGER},
      REFUND_STATUS = #{refundStatus,jdbcType=VARCHAR},
      REFUND_DESC = #{refundDesc,jdbcType=VARCHAR},
      REFUND_TIME = #{refundTime,jdbcType=TIMESTAMP},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>