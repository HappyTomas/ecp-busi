<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zengshi.ecp.staff.dao.mapper.busi.AuthStaff2RoleMapper" >
  <resultMap id="BaseResultMap" type="com.zengshi.ecp.staff.dao.model.AuthStaff2Role" >
    <id column="STAFF_ID" property="staffId" jdbcType="INTEGER" />
    <id column="ROLE_ID" property="roleId" jdbcType="INTEGER" />
    <result column="SYS_CODE" property="sysCode" jdbcType="VARCHAR" />
    <result column="STAFF_CLASS" property="staffClass" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="CREATE_STAFF" property="createStaff" jdbcType="INTEGER" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="UPDATE_STAFF" property="updateStaff" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    STAFF_ID, ROLE_ID, SYS_CODE, STAFF_CLASS, CREATE_TIME, CREATE_STAFF, UPDATE_TIME, 
    UPDATE_STAFF
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2RoleCriteria" >
    <if test="limitClauseStart != null and limitClauseStart >= 0" >
       select * from (select t_1.*,rownum as row_num from (
    </if>
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from t_auth_staff_2_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitClauseStart != null and limitClauseStart >= 0" >
       <![CDATA[ ) t_1 where rownum<=#{limitClauseCount,jdbcType=INTEGER} + #{limitClauseStart,jdbcType=INTEGER}) t_2 where t_2.row_num>#{limitClauseStart,jdbcType=INTEGER}]]>
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2RoleKey" >
    select 
    <include refid="Base_Column_List" />
    from t_auth_staff_2_role
    where STAFF_ID = #{staffId,jdbcType=INTEGER}
      and ROLE_ID = #{roleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2RoleKey" >
    delete from t_auth_staff_2_role
    where STAFF_ID = #{staffId,jdbcType=INTEGER}
      and ROLE_ID = #{roleId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2RoleCriteria" >
    delete from t_auth_staff_2_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2Role" >
    insert into t_auth_staff_2_role (STAFF_ID, ROLE_ID, SYS_CODE, 
      STAFF_CLASS, CREATE_TIME, CREATE_STAFF, 
      UPDATE_TIME, UPDATE_STAFF)
    values (#{staffId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{sysCode,jdbcType=VARCHAR}, 
      #{staffClass,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{createStaff,jdbcType=INTEGER}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateStaff,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2Role" >
    insert into t_auth_staff_2_role
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="staffId != null" >
        STAFF_ID,
      </if>
      <if test="roleId != null" >
        ROLE_ID,
      </if>
      <if test="sysCode != null" >
        SYS_CODE,
      </if>
      <if test="staffClass != null" >
        STAFF_CLASS,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="createStaff != null" >
        CREATE_STAFF,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
      <if test="updateStaff != null" >
        UPDATE_STAFF,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="staffId != null" >
        #{staffId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="sysCode != null" >
        #{sysCode,jdbcType=VARCHAR},
      </if>
      <if test="staffClass != null" >
        #{staffClass,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createStaff != null" >
        #{createStaff,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateStaff != null" >
        #{updateStaff,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2RoleCriteria" resultType="java.lang.Long" >
    select count(*) from t_auth_staff_2_role
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update t_auth_staff_2_role
    <set >
      <if test="record.staffId != null" >
        STAFF_ID = #{record.staffId,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null" >
        ROLE_ID = #{record.roleId,jdbcType=INTEGER},
      </if>
      <if test="record.sysCode != null" >
        SYS_CODE = #{record.sysCode,jdbcType=VARCHAR},
      </if>
      <if test="record.staffClass != null" >
        STAFF_CLASS = #{record.staffClass,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createStaff != null" >
        CREATE_STAFF = #{record.createStaff,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null" >
        UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateStaff != null" >
        UPDATE_STAFF = #{record.updateStaff,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update t_auth_staff_2_role
    set STAFF_ID = #{record.staffId,jdbcType=INTEGER},
      ROLE_ID = #{record.roleId,jdbcType=INTEGER},
      SYS_CODE = #{record.sysCode,jdbcType=VARCHAR},
      STAFF_CLASS = #{record.staffClass,jdbcType=VARCHAR},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      CREATE_STAFF = #{record.createStaff,jdbcType=INTEGER},
      UPDATE_TIME = #{record.updateTime,jdbcType=TIMESTAMP},
      UPDATE_STAFF = #{record.updateStaff,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2Role" >
    update t_auth_staff_2_role
    <set >
      <if test="sysCode != null" >
        SYS_CODE = #{sysCode,jdbcType=VARCHAR},
      </if>
      <if test="staffClass != null" >
        STAFF_CLASS = #{staffClass,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createStaff != null" >
        CREATE_STAFF = #{createStaff,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateStaff != null" >
        UPDATE_STAFF = #{updateStaff,jdbcType=INTEGER},
      </if>
    </set>
    where STAFF_ID = #{staffId,jdbcType=INTEGER}
      and ROLE_ID = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zengshi.ecp.staff.dao.model.AuthStaff2Role" >
    update t_auth_staff_2_role
    set SYS_CODE = #{sysCode,jdbcType=VARCHAR},
      STAFF_CLASS = #{staffClass,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      CREATE_STAFF = #{createStaff,jdbcType=INTEGER},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      UPDATE_STAFF = #{updateStaff,jdbcType=INTEGER}
    where STAFF_ID = #{staffId,jdbcType=INTEGER}
      and ROLE_ID = #{roleId,jdbcType=INTEGER}
  </update>
</mapper>